plugins {
  id 'java'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.GradleVsCode' version '1.3.0'
  id "edu.wpi.first.GradleRIO" version "2023.4.3"
}

def wpilibVersion = '2023.4.3'

sourceSets
{
  main {
    java {
      srcDirs = ['src/main/java/']
    }
  }
  test {
    java {
      srcDirs = ['src/test/java/']
    }
  }
}


ext.pubVersion = '0.0.1'
ext.json_version = "1.0"

apply plugin: "java"

repositories {
  mavenCentral()
}
if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply Java configuration
apply from: 'config.gradle'

dependencies {
    implementation "edu.wpi.first.cscore:cscore-java:${wpilibVersion}"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:${wpilibVersion}"
    implementation "edu.wpi.first.ntcore:ntcore-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpimath:wpimath-java:${wpilibVersion}"
    implementation "edu.wpi.first.hal:hal-java:${wpilibVersion}"
    implementation "edu.wpi.first.apriltag:apriltag-java:${wpilibVersion}"
    implementation "org.ejml:ejml-simple:0.41"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-core:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.4"
    implementation 'edu.wpi.first.thirdparty.frc2023.opencv:opencv-java:4.6.0-2'
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
}

def libFileInput = file("src/generate/NFRLib.json.in")
ext.libFileOutput = file("$buildDir/generated/vendordeps/NFRLib.json")

task generateVendorJson() {
    description = "Generates the vendor JSON file"

    outputs.file libFileOutput
    inputs.file libFileInput

    doLast {
        println "Writing version ${pubVersion} to $libFileOutput"

        if (libFileOutput.exists()) {
            libFileOutput.delete()
        }

        def read = libFileInput.text.replace('${lib_version}', pubVersion)
        read = read.replace('${json_version}', json_version)
        libFileOutput.write(read)
    }
    outputs.upToDateWhen { false }
}

build.dependsOn generateVendorJson

apply from: 'publish.gradle'
apply from: 'deploy.gradle'

wrapper {
  gradleVersion '7.5.1'
}
