apply plugin: 'maven-publish'
wpilibRepositories.addAllReleaseRepositories(project)
ext.licenseFile = files("$rootDir/LICENSE.txt")

def outputsFolder = file("$buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
    from versionFile
    dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

def artifactGroupId = 'org.northernforce'
def baseArtifactId = 'nfrlib'
def javaBaseName = "org_northernforce_ID_${baseArtifactId}-java_cls"

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task outputJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    from sourceSets.main.output
}

task outputSourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task outputJavadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def vendorJson = artifacts.add('archives', file("$libFileOutput"))

artifacts {
    archives sourcesJar
    archives javadocJar
    archives outputJar
    archives outputSourcesJar
    archives outputJavadocJar
}

addTaskToCopyAllOutputs(outputSourcesJar)
addTaskToCopyAllOutputs(outputJavadocJar)
addTaskToCopyAllOutputs(outputJar)

build.dependsOn outputSourcesJar
build.dependsOn outputJavadocJar
build.dependsOn outputJar

def releasesRepoUrl = "$buildDir/repos/releases"

publishing {
    repositories {
        if(project.hasProperty("repos.local")) {
            maven {
                url = releasesRepoUrl
            }
        }
        if(project.hasProperty("repos.external")) {
            maven {
                name = "repsy-repo"
                url = uri("https://repo.repsy.io/mvn/cml1010101/nfr-lib")
                credentials {
                    username = project.findProperty("auth.user") ?: System.getenv("REPSY_USERNAME") 
                    password = project.findProperty("auth.key") ?: System.getenv("REPSY_PASSWORD")  
                }
                println("json url is https://repsy.io/mvn/cml1010101/nfr-lib/org/northernforce/nfrlib-json/$json_version/nfrlib-json-$json_version" + ".json")
            }
        }
    }
}

task cleanReleaseRepo(type: Delete) {
    delete releasesRepoUrl
}

tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}

model {
    publishing {
        def taskList = generateVendorJson

        publications {

            if(project.hasProperty("pubs.publishJava")) {
                java(MavenPublication) {
                    artifact jar
                    artifact sourcesJar
                    artifact javadocJar

                    artifactId = "${baseArtifactId}-java"
                    groupId artifactGroupId
                    version pubVersion
                }
            }
            if(project.hasProperty("pubs.publishJson")){
                vendorjson(MavenPublication) {
                    artifact vendorJson

                    artifactId = "${baseArtifactId}-json"
                    groupId = artifactGroupId
                    version "$json_version"
                }
            }
        }
    }
}

tasks.withType(org.gradle.api.publish.maven.tasks.PublishToMavenRepository).configureEach {
    dependsOn generateVendorJson
}
publish.dependsOn build
